kubectl run nginx --image nginx --dry-run=client -o yaml > pod.yaml

kubectl create -f replicaset-defition.yaml

kubectl get replicaset

kubectl delete replicaset myapp-replicaset

kubectl replace -f replicaset-defition.yaml

kubectl scale -replicas=6 -f replicas

kubectl get all

kubectl create deployment frontend --image nginx

kubectl config set-context $(kubectl config current-context) dev

docker run -e VAR_NAME=value simple-webapp-color

command imperative: kubectl create configmap
command declarative: kubectl create -f

kubectl create configmap app-config --from-literal=APP_COLOR=blue

ubectl create secret generic db-secret --from-literal=DB_Host=sql01 --from-literal=DB_User=root --from-literal=DB_Password=password123

kubectl delete pods <pod> --grace-period=0

k get sa
k get serviceaccount

k get secret
k describe secret

k run poA --image=ubuntu --limits='memory=20Mi,cpu=0.5' --dry-run=client 

k taint nodes NODE_NAME key=value:taint-effect

remover taint
  k taint node master node-role.kubernetes.io/master:NoSchedule-

Aplicar label no node:
k label node node01 color=blue

k get nodes NODE_NAME --show-labels

k label nodes node01 color=blue

| base64 --decode;

Readness

Liveness - restart no caso da aplicacao nao estar UP
  livenessProbe:
    httpGet:
      path: /api/healths
      port: 8080

k get po --show-labels

k rollout undo deployment/myapp-deploy
